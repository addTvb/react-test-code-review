import React from "react";
import ReactDOM from "react-dom";
import "./index.css";
import App from "./components/App";
import reportWebVitals from "./reportWebVitals";
import { BrowserRouter as Router } from "react-router-dom";

ReactDOM.render(
  <React.StrictMode>
    <Router>
      <App />
    </Router>
  </React.StrictMode>,
  document.getElementById("root")
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

/**
 * Работа сделана очень хорошо! 9 из 10 пунктов по фукнциональности сделаны. Это отличный результат.
 * 
 * Хорошо настроенный роутинг, и аутенфикация. Также круто что вы вынесли обращение к API в отдельные
 * файлы, и компоненты не засорены логикой. Хочу также отметить умелое сипользование сокращений(синтаксического сахара)
 * в коде, код становится меньше, но при этом остается таким же читабельным.
 * 
 * Надо исправить:
 * - input при добавлении нового задания(task), не обнуляется. 
 *   В данном input'е пропущен аттрибут value, он становится
 *   не контролируемым. И именно поэтому при новой отправке 
 *   запроса, добавляется пустое задание(т.е ""), а текстовое
 *   поле хранит предыдущее значение. Так как оно не очистилось
 *   с помощью setInputValue("").
 * - На странице входа(LoginPage.jsx) и на странице регистрации(RegisterPage.jsx)
 *   поле ввода с паролем отображает вводимый пароль. Для исправления данной ошибки
 *   стоит обратить внимание на тип input'a.
 * - При отрисовке данных из массива, в компоненте TasksList.jsx упущен
 *   key prop.
 *  
 * Можно лучше:
 * - Разделение css по файлам. Вместе с методологией БЭМ которую, вы 
 *   отлично применили, разделение css кода, еще больше поможет вам
 *   бысрее отлаживать ваши компоненты.
 * - В компоненте Header событие onClick передано тегу <p>, да
 *   функционально все работает, но вот доступность такого компонента
 *   храмает, так как если пользователь захочет с помощью клавиатуры 
 *   нажать на "Выход" он просто не сможет этого сделать, так как 
 *   браузер не понимает что это кнопка и не сфокусируется на нем. 
 *   Для событий кликов всегда используйте тег <button> кроме тех 
 *   случев когда вы переходите на другую страницу или внешний ресурс
 *   в таких случаях есть тег <a>
 * - В компонентах NewTaskForm, Task и TodoPage использован тег
 *   React.Fragment(<></>) он помогает сгруппировать(обернуть) несколько 
 *   тегов в один, так как React не позволяет возвращать в компоненте,
 *   несколько тегов(или других компонентов). Но в компонентах приведенных
 *   выше, уже есть обертки, и React.Fragment там не нужен.
 * - В файле todoist-api.js, функцию getResponse лучше переписать
 *   так как в файле auth-api.js, с использованием тернарного оператора
 *   так код становится меньше(1 строчка), поддерживается единый кодовоый стиль,
 *   а так же он остается таким же читабельным.
 * - Также в этом же файле, в функции deleteTask вы заново прописываете
 *   функцию обработки ответа, будет лучше просто передать уже напсианную
 *   фукнцию getResponse. Так вы уберете дублирующийся код и сделаете его чище)
 * 
 * Итоги
 *   Работа выполнена хорошо. Код читабельный и чистый. Хочу обратить 
 *   ваше внимание на консоль devtools перед отправкой кода. Обращайте
 *   внимание на ошибки которые выводятся там, это очень полезный инстурмент
 *   во время разработки, он укажет вам на те ошибки которые не подсвечиваются
 *   редактором кода, и которые не мешают компиляции кода. Но при отправке в 
 *   стоит чистить консоль от ошибок.
 */